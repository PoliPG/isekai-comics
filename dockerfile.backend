# Creating multi-stage build for production
FROM node:18-alpine as base

RUN apk add --no-cache libc6-compat
RUN apk update

# config pnpm
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

RUN pnpm -g add turbo
 
FROM base AS builder
# Set working directory
WORKDIR /app
COPY . .
RUN turbo prune backend-blog --docker

FROM base as installer
WORKDIR /app
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ENV NODE_ENV=production

# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN pnpm -g add node-gyp
RUN pnpm config set network-timeout 600000 -g && pnpm install --only=production
ENV PATH /app/node_modules/.bin:$PATH

COPY --from=builder /app/out/full/ .
RUN pnpm turbo run build --filter=backend-blog...

# Creating final production image
FROM base as runner
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /app
COPY --from=installer /app/ ./
ENV PATH /app/node_modules/.bin:$PATH

RUN chown -R node:node /app
USER node

EXPOSE 1337
CMD ["pnpm", "start"]