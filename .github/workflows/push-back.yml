name: Build and deployment back

on:
  push:
    branches:
      - develop

env:
  PROJECT_ID: ${{secrets.PROJECT_ID}}
  CLUSTER_NAME: ${{secrets.CLUSTER_NAME}}
  GAR_LOCATION: ${{secrets.GAR_LOCATION}}
  REPOSITORY: ${{secrets.GAR_REPOSITORY}}
  SERVICE: ${{secrets.BACK_SERVICE}}
  REGION: ${{secrets.GCR_REGION }}
  # Project backend env
  NODE_ENV: production
  DATABASE_CLIENT: postgres
  PUBLIC_URL: http://34.175.250.54
  PORT: 1337
  DATABASE_URL: ${{secrets.BACKEND_DATABASE_URL}}
  JWT_SECRET: ${{secrets.BACKEND_STRAPI_JWT_SECRET}}
  APP_KEYS: ${{secrets.BACKEND_STRAPI_APP_KEYS}}
  API_TOKEN_SALT: ${{secrets.BACKEND_STRAPI_API_TOKEN_SALT}}
  ADMIN_JWT_SECRET: ${{secrets.BACKEND_STRAPI_ADMIN_JWT_SECRET}}
  TRANSFER_TOKEN_SALT: ${{secrets.BACKEND_STRAPI_TRANSFER_TOKEN_SALT}}

jobs:
  deploy:
    name: Deploy back
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Build Container
        run: >
          docker build 
          -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
          --build-arg NODE_ENV=${{env.NODE_ENV}}
          --build-arg PUBLIC_URL=${{evn.PUBLIC_URL}}
          --build-arg PORT=${{env.PORT}}
          --build-arg APP_KEYS=${{env.APP_KEYS}}
          --build-arg API_TOKEN_SALT=${{env.API_TOKEN_SALT}}
          --build-arg ADMIN_JWT_SECRET=${{env.ADMIN_JWT_SECRET}}
          --build-arg TRANSFER_TOKEN_SALT=${{env.TRANSFER_TOKEN_SALT}}
          --build-arg DATABASE_CLIENT=${{env.DATABASE_CLIENT}}
          --build-arg DATABASE_URL=${{env.DATABASE_URL}}
          --build-arg JWT_SECRET=${{env.JWT_SECRET}}
          .
          -f dockerfile.backend

      - name: Push Container
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure kubectl
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials ${{env.CLUSTER_NAME}} --zone ${{env.REGION}} --project ${{env.PROJECT_ID}}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/backend/deployment.yml --namespace=backend

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
